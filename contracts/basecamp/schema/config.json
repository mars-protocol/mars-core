{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "description": "Basecamp global configuration",
  "type": "object",
  "required": [
    "cooldown_duration",
    "effective_delay",
    "expiration_period",
    "mars_token_address",
    "owner",
    "proposal_deposit",
    "unstake_window",
    "voting_period",
    "xmars_token_address"
  ],
  "properties": {
    "cooldown_duration": {
      "description": "Cooldown duration in seconds",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "effective_delay": {
      "description": "Blocks that need to pass since a proposal succeeds in order for it to be available to be executed",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "expiration_period": {
      "description": "Blocks after the effective_delay during which a successful proposal can be activated before it expires",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "mars_token_address": {
      "description": "Mars token address",
      "allOf": [
        {
          "$ref": "#/definitions/CanonicalAddr"
        }
      ]
    },
    "owner": {
      "description": "Contract owner",
      "allOf": [
        {
          "$ref": "#/definitions/CanonicalAddr"
        }
      ]
    },
    "proposal_deposit": {
      "description": "Number of Mars needed to make a proposal. Will be returned if successful. Will be distributed between stakers if proposal is not executed.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "unstake_window": {
      "description": "Time in seconds after the cooldown ends during which the unstaking of the associated amount is allowed",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "voting_period": {
      "description": "Blocks during which a proposal is active since being submitted",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "xmars_token_address": {
      "description": "xMars token address",
      "allOf": [
        {
          "$ref": "#/definitions/CanonicalAddr"
        }
      ]
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CanonicalAddr": {
      "$ref": "#/definitions/Binary"
    },
    "Uint128": {
      "type": "string"
    }
  }
}
